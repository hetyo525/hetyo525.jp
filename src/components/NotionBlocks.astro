---
import { buildURLToHTMLMap, isAmazonURL, isTweetURL } from '@/lib/blog-helpers.ts';
import type * as interfaces from '@/lib/interfaces.ts';
import Bookmark from './notion-blocks/Bookmark.astro';
import BulletedListItems from './notion-blocks/BulletedListItems.astro';
import Callout from './notion-blocks/Callout.astro';
import Code from './notion-blocks/Code.astro';
import ColumnList from './notion-blocks/ColumnList.astro';
import Divider from './notion-blocks/Divider.astro';
import Embed from './notion-blocks/Embed.astro';
import Equation from './notion-blocks/Equation.astro';
import File from './notion-blocks/File.astro';
import Heading1 from './notion-blocks/Heading1.astro';
import Heading2 from './notion-blocks/Heading2.astro';
import Heading3 from './notion-blocks/Heading3.astro';
import Image from './notion-blocks/Image.astro';
import LinkToPage from './notion-blocks/LinkToPage.astro';
import NumberedListItems from './notion-blocks/NumberedListItems.astro';
import Paragraph from './notion-blocks/Paragraph.astro';
import Quote from './notion-blocks/Quote.astro';
import SyncedBlock from './notion-blocks/SyncedBlock.astro';
import Table from './notion-blocks/Table.astro';
import TableOfContents from './notion-blocks/TableOfContents.astro';
import ToDo from './notion-blocks/ToDo.astro';
import Toggle from './notion-blocks/Toggle.astro';
import Video from './notion-blocks/Video.astro';

export interface Props {
  blocks?: interfaces.Block[];
  isRoot?: boolean;
  level?: number;
  headings?: interfaces.Block[];
}

const { blocks: rawBlocks = [], isRoot = false, level = 1, headings: rawHeadings = [] } = Astro.props;

const blocks = rawBlocks.reduce((arr, block, i: number) => {
  const isBulletedListItem = block.Type === 'bulleted_list_item';
  const isNumberedListItem = block.Type === 'numbered_list_item';
  const isToDo = block.Type === 'to_do';

  if (!isBulletedListItem && !isNumberedListItem && !isToDo) {
    return arr.concat(block);
  }

  let listType = '';
  if (isBulletedListItem) {
    listType = 'bulleted_list';
  } else if (isNumberedListItem) {
    listType = 'numbered_list';
  } else {
    listType = 'to_do_list';
  }

  if (i === 0) {
    const list: interfaces.List = {
      Type: listType,
      ListItems: [block],
    };
    return arr.concat(list);
  }

  const prevList = arr[arr.length - 1] as interfaces.List;

  if (
    (isBulletedListItem && prevList.Type !== 'bulleted_list') ||
    (isNumberedListItem && prevList.Type !== 'numbered_list') ||
    (isToDo && prevList.Type !== 'to_do_list')
  ) {
    const list: interfaces.List = {
      Type: listType,
      ListItems: [block],
    };
    return arr.concat(list);
  }

  prevList.ListItems.push(block);

  return arr;
}, Array<interfaces.Block | interfaces.List>());

let headings = rawHeadings;
if (isRoot) {
  headings = blocks.filter((b): b is interfaces.Block => ['heading_1', 'heading_2', 'heading_3'].includes(b.Type));
}

const bookmarkURLs = blocks
  .filter((b): b is interfaces.Block => ['bookmark', 'link_preview', 'embed'].includes(b.Type))
  .map((b) => {
    let url: URL | undefined;
    try {
      url = new URL((b.Bookmark || b.LinkPreview || b.Embed)?.Url ?? '');
    } catch (err) {
      console.log(err);
    }
    return url;
  })
  .filter((url) => url && !isTweetURL(url) && !isAmazonURL(url)) as URL[];

const bookmarkURLMap = await buildURLToHTMLMap(bookmarkURLs);

const isList = (block: interfaces.Block | interfaces.List): block is interfaces.List => {
  return ['bulleted_list', 'numbered_list', 'to_do_list'].includes(block.Type);
};
---

{
  blocks.map((block) => {
    if (isList(block)) {
      switch (block.Type) {
        case 'bulleted_list':
          return <BulletedListItems block={block} headings={headings} />;
        case 'numbered_list':
          return <NumberedListItems block={block} level={level} headings={headings} />;
        case 'to_do_list':
          return <ToDo block={block} headings={headings} />;
      }
    } else {
      switch (block.Type) {
        case 'paragraph':
          return <Paragraph block={block} headings={headings} />;
        case 'heading_1':
          return <Heading1 block={block} headings={headings} />;
        case 'heading_2':
          return <Heading2 block={block} headings={headings} />;
        case 'heading_3':
          return <Heading3 block={block} headings={headings} />;
        case 'table_of_contents':
          return <TableOfContents block={block} headings={headings} />;
        case 'image':
          return <Image block={block} />;
        case 'video':
          return <Video block={block} />;
        case 'code':
          return <Code block={block} />;
        case 'quote':
          return <Quote block={block} headings={headings} />;
        case 'equation':
          return <Equation block={block} />;
        case 'callout':
          return <Callout block={block} headings={headings} />;
        case 'embed':
          return <Embed block={block} urlMap={bookmarkURLMap} />;
        case 'bookmark':
        case 'link_preview':
          return <Bookmark block={block} urlMap={bookmarkURLMap} />;
        case 'divider':
          return <Divider />;
        case 'table':
          return <Table block={block} />;
        case 'column_list':
          return <ColumnList block={block} headings={headings} />;
        case 'synced_block':
          return <SyncedBlock block={block} headings={headings} />;
        case 'toggle':
          return <Toggle block={block} headings={headings} />;
        case 'file':
          return <File block={block} />;
        case 'link_to_page':
          return <LinkToPage block={block} />;
      }
    }

    return null;
  })
}
