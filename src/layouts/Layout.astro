---
import GoogleAnalytics from '@/components/GoogleAnalytics.astro';
import PagefindSearch from '@/components/PagefindSearch.astro';
import { getNavLink, getStaticFilePath } from '@/lib/blog-helpers';
import { PUBLIC_GA_TRACKING_ID } from '@/server-constants';

import 'beercss';

export interface Props {
  feature?: string;
  title?: string;
  description?: string;
  path?: string;
  ogImage?: string;
  includePadefind?: boolean;
}

const DEFAULT_SITE_TITLE = 'hetyo525.jp';
const DEFAULT_SITE_DESCRIPTION = '@hetyo525 は日本のアニメ・女性声優のオタク。';

const { feature = '', title = '', description = '', path = '/', ogImage = '', includePadefind = false } = Astro.props;

const siteTitle = title ? `${title} - ${DEFAULT_SITE_TITLE}` : DEFAULT_SITE_TITLE;
const siteDescription = description ? description : DEFAULT_SITE_DESCRIPTION;
const siteURL = new URL(getNavLink(path), Astro.site).toString();
const siteOGImage = new URL(getStaticFilePath('/default-og-image.png'), Astro.site);
---

<!doctype html>
<html lang="ja" prefix="og: https://ogp.me/ns#">
  <head>
    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0" />
    <meta name="robots" content="max-image-preview:large" />
    <meta charset="UTF-8" />
    <meta name="generator" content={Astro.generator} />
    <title>{siteTitle}</title>
    <meta name="description" content={siteDescription} />
    <link rel="canonical" href={siteURL} />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta property="og:url" content={siteURL} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:site_name" content={siteTitle} />
    <meta property="og:image" content={ogImage ?? siteOGImage} />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:image" content={ogImage ?? siteOGImage} />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
      integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
      crossorigin="anonymous"
    />
  </head>

  <body class="dark">
    <GoogleAnalytics trackingId={PUBLIC_GA_TRACKING_ID} />
    <header class="fixed responsive max">
      <nav id="header-nav">
        <div class="title row">
          <a class="large-text bold" href="/">hetyo525.jp</a>
          {
            feature && (
              <>
                <p class="m l s large-text">{`/`}</p>
                <p class="m l s large-text">{feature}</p>
              </>
            )
          }
        </div>

        <div class="max"></div>
        <PagefindSearch />
        <div class="l m max"></div>

        <!-- 日記 -->
        <a class="l button transparent small-round" href="/blog">
          <i>description</i>
          ぶろぐ
        </a>
        <a class="m s button small transparent circle" href="/blog" title="にっき">
          <i>description</i>
        </a>

        <!-- 予定 -->
        <a class="l button transparent small-round" href="/schedule">
          <i>today</i>
          よてい
        </a>
        <a class="m s button small transparent circle" href="/schedule" title="よてい">
          <i>today</i>
        </a>

        <button class="l transparent circle theme-bth">
          <i>light_mode</i>
        </button>
        <button class="m s small transparent circle theme-bth">
          <i>light_mode</i>
        </button>
      </nav>
    </header>

    <main class="responsive" data-pagefind-body={includePadefind}>
      <slot name="main" />
    </main>

    <div class="footer-wrapper">
      <footer class="responsive center-align">
        <div>
          <p class="small-text">© 2024 hetyo525</p>
        </div>
      </footer>
    </div>
  </body>
</html>

<style>
  .container {
    min-height: 100dvh;
  }

  .container > div {
    display: flex;
    max-width: 1280px;
  }
  .title {
    min-width: 196px;
  }

  header {
    min-block-size: 3rem;
    transition:
      translateY 600ms,
      opacity 200ms;
  }
  header.hide {
    translatey: -100%;
    opacity: 0;
  }
  header > nav {
    gap: 0.5rem;
  }

  main.responsive {
    padding: 1rem;
  }

  .footer-wrapper {
    background-color: var(--surface-container);
  }

  body.no-scroll {
    max-height: 100dvh;
    height: 100dvh;
  }

  nav > .button.l {
    padding: 0 0.75rem;
  }

  @media (max-width: 640px) {
    .container > div {
      display: block;
    }
    header {
      padding: 0 0.5rem;
    }
    main.responsive {
      padding: 0.5rem;
    }
    .title.row {
      gap: 0.25rem;
    }
  }
</style>

<script is:inline>
  // localStorage or OS のテーマで theme を判定
  if (!localStorage.getItem('theme')) {
    const theme = matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    localStorage.setItem('theme', theme);
  }
  const body = document.querySelector('body');
  if (localStorage.getItem('theme') === 'light') {
    body.classList.remove('dark');
    body.classList.add('light');
  }
</script>

<script>
  // テーマのトグルボタン
  const themeBtn = document.getElementsByClassName('theme-bth');
  for (let i = 0; i < themeBtn.length; i++) {
    const btn = themeBtn[i];
    btn?.addEventListener('click', () => {
      const oldIcon = btn.querySelector('i')!;
      const oldTheme = localStorage.getItem('theme')!;
      const body = document.querySelector('body')!;
      const newIcon = oldIcon.cloneNode();
      const newTheme = oldTheme === 'dark' ? 'light' : 'dark';
      newIcon.textContent = newTheme + '_mode';
      oldIcon.replaceWith(newIcon);
      body.classList.replace(oldTheme, newTheme);
      localStorage.setItem('theme', newTheme);
    });
  }

  // ヘッダーの表示・非表示
  let lastScrollTop = 0;
  function scrollHandler() {
    const header = document.querySelector('header')!;
    const body = document.querySelector('body')!;
    const scrollTop = window.scrollY || document.documentElement.scrollTop;
    if (scrollTop < lastScrollTop) {
      // スクロールが上向きのとき
      header.classList.remove('hide');
    } else if (window.scrollY > 48 && !body.classList.contains('no-scroll')) {
      // スクロールが下向きのとき
      header.classList.add('hide');
    }
    lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
  }

  // スクロール中にヘッダーを処理するためのスロットリング
  let timeout: NodeJS.Timeout | null = null;
  function throttleScrollHandler() {
    if (timeout) {
      clearTimeout(timeout);
    }
    timeout = setTimeout(() => {
      scrollHandler();
      timeout = null;
    }, 50); // 50ミリ秒ごとに処理を実行
  }

  document.addEventListener('scroll', throttleScrollHandler);
</script>
